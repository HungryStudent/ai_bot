from aiogram import Bot
from aiogram.types import Message, CallbackQuery, ChatActions, Update
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext

from utils import db, ai, more_api
from states import user as states
import keyboards.user as user_kb
from config import bot_url, TOKEN
from create_bot import dp


async def get_mj(prompt, user_id, bot: Bot):
    await bot.send_message(user_id, "–û–∂–∏–¥–∞–π—Ç–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..üïô",
                           reply_markup=await user_kb.get_menu(user_id))
    await bot.send_chat_action(user_id, ChatActions.UPLOAD_PHOTO)

    res = await ai.get_mdjrny(prompt, user_id)

    if not res["status"]:
        msg_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ"
        if res["error"] == "banned word error":
            msg_text = "–ó–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ"
        await bot.send_message(user_id, msg_text)
    if res["mj_api"] == "reserve":
        await db.update_task_id(user_id, res["task_id"])


@dp.message_handler(state="*", commands='start')
async def start_message(message: Message, state: FSMContext):
    await state.finish()

    user = await db.get_user(message.from_user.id)
    if user is None:
        inviter_id = message.get_args()
        if inviter_id in ["", str(message.from_user.id)]:
            inviter_id = 0

        await db.add_user(message.from_user.id, message.from_user.username, message.from_user.first_name, inviter_id)
    await message.answer("""<b>NeuronAgent</b>ü§ñ - <i>–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç.</i>

<b>–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?</b>""", reply_markup=await user_kb.get_menu(message.from_user.id))


@dp.callback_query_handler(text="check_sub")
async def check_sub(call: CallbackQuery):
    user = await db.get_user(call.from_user.id)
    if user is None:
        await db.add_user(call.from_user.id, call.from_user.username, call.from_user.first_name, 0)
    await call.message.answer("""<b>NeuronAgent</b>ü§ñ - <i>–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç.</i>

<b>–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?</b>""", reply_markup=await user_kb.get_menu(call.from_user.id))
    await call.answer()


@dp.message_handler(text="ü§ù–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
async def ref_menu(message: Message):
    ref_data = await db.get_ref_stat(message.from_user.id)
    if ref_data['all_income'] is None:
        all_income = 0
    else:
        all_income = ref_data['all_income']
    await message.answer_photo(more_api.get_qr_photo(bot_url + '?start=' + str(message.from_user.id)),
                               caption=f'''<b>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>
         
<i>–ü—Ä–∏–≤–æ–¥–∏ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π 15% —Å –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π, –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ!</i>

<b>‚¨áÔ∏è –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
‚îî {bot_url}?start={message.from_user.id}

<b>üèÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚îú –õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö: <b>{ref_data["count_refs"]}</b>
‚îú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—Ç: <b>{ref_data["orders_count"]}</b>
‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{all_income}</b> —Ä—É–±–ª–µ–π
‚îî –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: <b>{ref_data["available_for_withdrawal"]}</b> —Ä—É–±–ª–µ–π

–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ''',
                               reply_markup=user_kb.get_ref_menu(f'{bot_url}?start={message.from_user.id}'))


@dp.message_handler(state="*", text="‚öô–ê–∫–∫–∞—É–Ω—Ç")
async def show_profile(message: Message, state: FSMContext):
    await state.finish()
    user = await db.get_user(message.from_user.id)
    await message.answer(f"""üÜî: <code>{message.from_user.id}</code>
üí∞–ë–∞–ª–∞–Ω—Å: {user['balance']} —Ä—É–±.""", reply_markup=user_kb.top_up_balance)


@dp.callback_query_handler(text="back_to_profile")
async def back_to_profile(call: CallbackQuery):
    user = await db.get_user(call.from_user.id)
    await call.message.edit_text(f"""id: {call.from_user.id}
–ë–∞–ª–∞–Ω—Å: {user['balance']} —Ä—É–±.""", reply_markup=user_kb.top_up_balance)


@dp.callback_query_handler(text="top_up_balance")
async def choose_amount(call: CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", reply_markup=user_kb.get_pay(call.from_user.id))


@dp.callback_query_handler(text="back_to_choose_balance", state="*")
async def back_to_choose_balance(call: CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", reply_markup=user_kb.get_pay(call.from_user.id))


@dp.callback_query_handler(text="other_amount")
async def enter_other_amount(call: CallbackQuery):
    await call.message.edit_text("""–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ —Ä—É–±–ª—è—Ö:

<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ 200 —Ä—É–±–ª–µ–π</b>""", reply_markup=user_kb.back_to_choose)
    await states.EnterAmount.enter_amount.set()


@dp.message_handler(state="*", text="üí¨–¢–µ–∫—Å—Ç‚úÖ")
@dp.message_handler(state="*", text="üí¨–¢–µ–∫—Å—Ç")
async def ask_question(message: Message, state: FSMContext):
    await state.finish()
    await db.change_default_ai(message.from_user.id, "chatgpt")

    await message.answer("""<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å</b>

–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É: –ö–∞–∫ —è –ø—Ä–æ–≤—ë–ª —ç—Ç–æ –ª–µ—Ç–æ</code>

<i>–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –±–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç –ª—É—á—à–µ.</i>

–ù–∞–ø—Ä–∏–º–µ—Ä: <code>Write a blog post about the environmental benefits of segregated waste collection for a broad audience</code>""",
                         reply_markup=await user_kb.get_menu(message.from_user.id))


@dp.message_handler(state="*", text="üë®üèª‚Äçüíª–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: Message, state: FSMContext):
    await state.finish()
    await message.answer('–û—Ç–≤–µ—Ç—ã –Ω–∞ –º–Ω–æ–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–º <a href="https://t.me/NeuronAgent">–∫–∞–Ω–∞–ª–µ</a>.',
                         disable_web_page_preview=True, reply_markup=user_kb.about)


@dp.message_handler(state="*", text="üé®–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚úÖ")
@dp.message_handler(state="*", text="üé®–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
async def gen_img(message: Message, state: FSMContext):
    await state.finish()
    await db.change_default_ai(message.from_user.id, "image")
    await message.answer("""<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>

–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ó–∞–º–µ—Ä–∑—à–µ–µ –±–∏—Ä—é–∑–æ–≤–æ–µ –æ–∑–µ—Ä–æ –≤–æ–∫—Ä—É–≥ –∑–∞—Å–Ω–µ–∂–µ–Ω–Ω—ã—Ö –≥–æ—Ä–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω</code>

<u><i>–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –±–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç –ª—É—á—à–µ.</i></u>

–ù–∞–ø—Ä–∏–º–µ—Ä: <code>Cat, psytrance, uhd, detailed, ornate, beautiful, 8k, photography</code>""",
                         reply_markup=await user_kb.get_menu(message.from_user.id))


@dp.message_handler(state=states.EnterAmount.enter_amount)
async def create_other_order(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
        return
    if amount < 200:
        await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ 200 —Ä—É–±–ª–µ–π")
    else:
        await message.answer(f"""üí∞ –°—É–º–º–∞: <b>{amount} —Ä—É–±–ª–µ–π

‚ôªÔ∏è –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>""", reply_markup=user_kb.get_other_pay(message.from_user.id, amount))
        await state.finish()


@dp.message_handler(state="*", text="–û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):
    await state.finish()
    await message.answer("–í–≤–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=await user_kb.get_menu(message.from_user.id))


@dp.callback_query_handler(Text(startswith="choose_image:"))
async def choose_image(call: CallbackQuery):
    await call.answer()
    buttonMessageId = call.data.split(":")[1]
    image_id = int(call.data.split(":")[2])
    mj_api = call.data.split(":")[3]
    await call.message.answer("–û–∂–∏–¥–∞–π—Ç–µ, —Å–æ—Ö—Ä–∞–Ω—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–ª–∏—á–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ‚Ä¶‚è≥",
                              reply_markup=await user_kb.get_menu(call.from_user.id))
    res = await ai.get_choose_mdjrny(buttonMessageId, image_id, call.from_user.id, mj_api)
    if not res["status"]:
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
    elif mj_api == "reserve":
        await call.message.answer_photo(res["image_url"])


@dp.callback_query_handler(Text(startswith="try_prompt"))
async def try_prompt(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await call.answer()
    ai_type = call.data.split(":")[1]

    user = await db.get_user(call.from_user.id)

    if user["default_ai"] == "chatgpt":
        if user["balance"] < 10:
            if user["free_chatgpt"] == 0:
                await call.message.answer("""<i>–£–ø—Å.. 
–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤

1 –∑–∞–ø—Ä–æ—Å - 10 —Ä—É–±–ª–µ–π</i>

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å ‚§µ""", reply_markup=user_kb.top_up_balance)
                return
        await call.message.answer("–û–∂–∏–¥–∞–π—Ç–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç..üïô",
                                  reply_markup=await user_kb.get_menu(call.from_user.id))
        await call.message.answer_chat_action(ChatActions.TYPING)
        result = await ai.get_gpt(data['prompt'])
        await call.message.answer(result, reply_markup=user_kb.get_try_prompt('chatgpt'))
        user = await db.get_user(call.from_user.id)
        if user["free_chatgpt"] > 0:
            await db.remove_chatgpt(call.from_user.id)
        else:
            await db.remove_balance(call.from_user.id)
        await db.add_action(call.from_user.id, "chatgpt")
    elif user["default_ai"] == "image":
        if user["balance"] < 10:
            if user["free_image"] == 0:
                await call.message.answer("""<i>–£–ø—Å.. 
–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤

1 –∑–∞–ø—Ä–æ—Å - 10 —Ä—É–±–ª–µ–π</i>

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å ‚§µ""", reply_markup=user_kb.top_up_balance)
                return
        await get_mj(data['prompt'], call.from_user.id, call.bot)




@dp.message_handler()
async def gen_prompt(message: Message, state: FSMContext):
    await state.update_data(prompt=message.text)
    user = await db.get_user(message.from_user.id)
    if user["default_ai"] == "chatgpt":
        if user["balance"] < 10:
            if user["free_chatgpt"] == 0:
                await message.answer("""<i>–£–ø—Å.. 
–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤

1 –∑–∞–ø—Ä–æ—Å - 10 —Ä—É–±–ª–µ–π</i>

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å ‚§µ""", reply_markup=user_kb.top_up_balance)
                return
        await message.answer("–û–∂–∏–¥–∞–π—Ç–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç..üïô", reply_markup=await user_kb.get_menu(message.from_user.id))
        await message.answer_chat_action(ChatActions.TYPING)
        result = await ai.get_gpt(message.text)
        await message.answer(result, reply_markup=user_kb.get_try_prompt('chatgpt'))
        user = await db.get_user(message.from_user.id)
        if user["free_chatgpt"] > 0:
            await db.remove_chatgpt(message.from_user.id)
        else:
            await db.remove_balance(message.from_user.id)
        await db.add_action(message.from_user.id, "chatgpt")
    elif user["default_ai"] == "image":
        if user["balance"] < 10:
            if user["free_image"] == 0:
                await message.answer("""<i>–£–ø—Å.. 
–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤

1 –∑–∞–ø—Ä–æ—Å - 10 —Ä—É–±–ª–µ–π</i>

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å ‚§µ""", reply_markup=user_kb.top_up_balance)
                return
        await get_mj(message.text, message.from_user.id, message.bot)


@dp.message_handler(content_types="photo")
async def photo_imagine(message: Message):
    if message.caption is None:
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        return
    file = await message.photo[-1].get_file()
    photo_url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
    ds_photo_url = await more_api.upload_photo_to_host(photo_url)
    prompt = ds_photo_url + " " + message.caption
    user = await db.get_user(message.from_user.id)
    if user["balance"] < 10:
        if user["free_image"] == 0:
            await message.answer("""<i>–£–ø—Å.. 
–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤

1 –∑–∞–ø—Ä–æ—Å - 10 —Ä—É–±–ª–µ–π</i>

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å ‚§µ""", reply_markup=user_kb.top_up_balance)
            return

    await get_mj(prompt, message.from_user.id, message.bot)
