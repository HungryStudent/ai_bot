from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery, ChatActions

import keyboards.admin as admin_kb
from states import user as states
import keyboards.user as user_kb
from create_bot import dp
from utils import db, ai


@dp.message_handler(state="*", commands='start')
async def start_message(message: Message, state: FSMContext):
    await state.finish()
    user = db.get_user(message.from_user.id)
    if user is None:
        db.add_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
    await message.answer("""<b>NeuronAgent</b>ü§ñ - <i>–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç.</i>

<b>–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?</b>""", reply_markup=user_kb.menu)


@dp.callback_query_handler(text="check_sub")
async def check_sub(call: CallbackQuery):
    user = db.get_user(call.from_user.id)
    if user is None:
        db.add_user(call.from_user.id, call.from_user.username, call.from_user.first_name)
    await call.message.answer("""<b>NeuronAgent</b>ü§ñ - <i>–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç.</i>

<b>–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?</b>""", reply_markup=user_kb.menu)
    await call.answer()


@dp.message_handler(text="‚öô–ê–∫–∫–∞—É–Ω—Ç")
async def show_profile(message: Message):
    user = db.get_user(message.from_user.id)
    await message.answer(f"""üÜî: <code>{message.from_user.id}</code>
üí∞–ë–∞–ª–∞–Ω—Å: {user['balance']} —Ä—É–±.""", reply_markup=user_kb.top_up_balance)


@dp.callback_query_handler(text="back_to_profile")
async def back_to_profile(call: CallbackQuery):
    user = db.get_user(call.from_user.id)
    await call.message.edit_text(f"""id: {call.from_user.id}
–ë–∞–ª–∞–Ω—Å: {user['balance']} —Ä—É–±.""", reply_markup=user_kb.top_up_balance)


@dp.callback_query_handler(text="top_up_balance")
async def choose_amount(call: CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", reply_markup=user_kb.get_pay(call.from_user.id))


@dp.callback_query_handler(text="back_to_choose_balance", state="*")
async def back_to_choose_balance(call: CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", reply_markup=user_kb.get_pay(call.from_user.id))


@dp.callback_query_handler(text="other_amount")
async def enter_other_amount(call: CallbackQuery):
    await call.message.edit_text("""–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ —Ä—É–±–ª—è—Ö:

<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ 200 —Ä—É–±–ª–µ–π</b>""", reply_markup=user_kb.back_to_choose)
    await states.EnterAmount.enter_amount.set()


@dp.message_handler(state=states.EnterAmount.enter_amount)
async def create_other_order(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
        return
    if amount < 200:
        await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ 200 —Ä—É–±–ª–µ–π")
    else:
        await message.answer(f"""üí∞ –°—É–º–º–∞: <b>{amount} —Ä—É–±–ª–µ–π

‚ôªÔ∏è –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>""", reply_markup=user_kb.get_other_pay(message.from_user.id, amount))
        await state.finish()


@dp.message_handler(text="üë®üèª‚Äçüíª–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: Message):
    await message.answer('–û—Ç–≤–µ—Ç—ã –Ω–∞ –º–Ω–æ–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–º <a href="https://t.me/NeuronAgent">–∫–∞–Ω–∞–ª–µ</a>.',
                         reply_markup=user_kb.about)


@dp.message_handler(state="*", text="–û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):
    await state.finish()
    await message.answer("–í–≤–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=user_kb.menu)


@dp.message_handler(text="üí¨–¢–µ–∫—Å—Ç")
async def ask_question(message: Message):
    await message.answer("""<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å</b>
    
–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É: –ö–∞–∫ —è –ø—Ä–æ–≤—ë–ª —ç—Ç–æ –ª–µ—Ç–æ</code>""", reply_markup=user_kb.cancel)
    await states.EnterPromt.gpt_prompt.set()


@dp.message_handler(text="üé®–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
async def gen_img(message: Message):
    await message.answer("""<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>
    
–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ó–∞–º–µ—Ä–∑—à–µ–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ –æ–∑–µ—Ä–æ –≤–æ–∫—Ä—É–≥ –∑–∞—Å–Ω–µ–∂–µ–Ω–Ω—ã—Ö –≥–æ—Ä–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω</code>""",
                         reply_markup=user_kb.cancel)
    await states.EnterPromt.mdjrny_prompt.set()


@dp.message_handler(state=states.EnterPromt.gpt_prompt)
async def gpt_prompt(message: Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if user["balance"] < 10:
        if user["free_chatgpt"] == 0:
            await message.answer("""<i>–£–ø—Å.. 
–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤

1 –∑–∞–ø—Ä–æ—Å - 10 —Ä—É–±–ª–µ–π</i>

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å ‚§µ""", reply_markup=user_kb.top_up_balance)
            return
    await message.answer("–û–∂–∏–¥–∞–π—Ç–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç..üïô", reply_markup=user_kb.menu)
    await message.answer_chat_action(ChatActions.TYPING)
    await state.finish()
    # result = await ai.get_gpt(message.text)
    # await message.answer(result)
    user = db.get_user(message.from_user.id)
    if user["free_chatgpt"] > 0:
        db.remove_chatgpt(message.from_user.id)
    else:
        db.remove_balance(message.from_user.id)
    db.add_action(message.from_user.id, "chatgpt")


@dp.message_handler(state=states.EnterPromt.mdjrny_prompt)
async def mdjrny_prompt(message: Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if user["balance"] < 10:
        if user["free_image"] == 0:
            await message.answer("""<i>–£–ø—Å.. 
–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤

1 –∑–∞–ø—Ä–æ—Å - 10 —Ä—É–±–ª–µ–π</i>

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å ‚§µ""", reply_markup=user_kb.top_up_balance)
            return
    await message.answer("–û–∂–∏–¥–∞–π—Ç–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..üïô", reply_markup=user_kb.menu)
    await message.answer_chat_action(ChatActions.UPLOAD_PHOTO)
    await state.finish()
    photo_url = await ai.get_mdjrny(message.text)
    if photo_url == "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ":
        await message.answer(photo_url, reply_markup=user_kb.menu)
    else:
        await message.answer_photo(photo_url[0])
        user = db.get_user(message.from_user.id)
        if user["free_image"] > 0:
            db.remove_image(message.from_user.id)
        else:
            db.remove_balance(message.from_user.id)
        db.add_action(message.from_user.id, "image")
